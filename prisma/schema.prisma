// Prisma schema

generator client {
    provider = "prisma-client-js"
}

// database config
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(cuid()) // user id from Clerk, as foreign key of Account below
    emailAddress String @unique // user email address
    firstName String
    lastName String
    imageUrl String? // optional
    accounts Account[] // a user has multiple user accounts
}

model Account {
    id String @id @default(cuid()) // unique account id
    userId String // different account may have same user

    accessToken String @unique // each token represents an email account
    emailAddress String // email address of the email account
    name String // name of the email account

    // latest delta token of email account, from Aurinko, optional
    latestDeltaToken String?

    threads Thread[] // email threads

    // store each email this account has interacted with
    emailAddresses EmailAddress[] 

    // relation here, userId of an email account links to id of a user
    user User @relation(fields: [userId], references: [id])
} 

model Thread {
    id String @id @default(cuid()) // unique key identifies a thread
    subject String // title
    lastMessageDate DateTime

    // all email ids in this thread
    participantIds String[] 

    accountId String // thread link to a account, Thread.accountId <-> Account.id
    account Account @relation(fields: [accountId], references: [id]) // foreign key def
    
    // thread status
    done Boolean @default(false)

    // three thread categories
    inboxStatus Boolean @default(true)
    draftStatus Boolean @default(true)
    sentStatus Boolean @default(true)

    // a thread subject holding one or more emails
    emails Email[]

    // create index to speed up search
    @@index([accountId])
    @@index([done])
    @@index([inboxStatus])
    @@index([draftStatus])
    @@index([sentStatus])
    @@index([lastMessageDate])

}

model Email {
    id                   String                @id @default(cuid())
    // each email belongs to a thread
    threadId             String
    thread               Thread                @relation(fields: [threadId], references: [id])
    // time
    createdTime          DateTime
    lastModifiedTime     DateTime
    sentAt               DateTime
    receivedAt           DateTime

    internetMessageId    String
    // title 
    subject              String
    sysLabels            String[]
    keywords             String[]
    sysClassifications   String[]
    sensitivity          Sensitivity           @default(normal)
    meetingMessageMethod MeetingMessageMethod?
    from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id])
    fromId               String
    to                   EmailAddress[]        @relation("ToEmails")
    cc                   EmailAddress[]        @relation("CcEmails")
    bcc                  EmailAddress[]        @relation("BccEmails")
    replyTo              EmailAddress[]        @relation("ReplyToEmails")
    hasAttachments       Boolean
    body                 String?
    bodySnippet          String?
    attachments          EmailAttachment[]
    inReplyTo            String?
    references           String?
    threadIndex          String?
    internetHeaders      Json[]
    nativeProperties     Json?
    folderId             String?
    omitted              String[]

    emailLabel EmailLabel @default(inbox)

    @@index([threadId])
    @@index([emailLabel])
    @@index([sentAt])
}

model EmailAddress {
    id            String  @id @default(cuid())
    name          String?
    address       String
    raw           String?
    
    sentEmails    Email[] @relation("FromEmail")
    receivedTo    Email[] @relation("ToEmails")
    receivedCc    Email[] @relation("CcEmails")
    receivedBcc   Email[] @relation("BccEmails")
    replyToEmails Email[] @relation("ReplyToEmails")

    accountId String
    account   Account @relation(fields: [accountId], references: [id])

    @@unique([accountId, address])
}

model EmailAttachment {
    id              String  @id @default(cuid())
    name            String
    mimeType        String
    size            Int
    inline          Boolean
    contentId       String?
    content         String?
    contentLocation String?
    Email           Email   @relation(fields: [emailId], references: [id])
    emailId         String
}


enum Sensitivity {
    normal
    private
    personal
    confidential
}

enum MeetingMessageMethod {
    request
    reply
    cancel
    counter
    other
}

enum EmailLabel {
    inbox
    sent
    draft
}